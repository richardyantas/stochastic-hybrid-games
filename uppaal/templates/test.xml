<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>clock GTime;
//Place global declarations here.
typedef double zonotope_t[4];
const int max_zonotopes = 64-1;
const int max_setListsPa= 64-1;
const int max_listPa    = 22-1;
const int max_paLen     = 3-1;
typedef int[0,max_zonotopes]  id_zonotope_t;
typedef int[0,max_setListsPa] id_list_patterns_t;
typedef int[0,max_listPa]     id_pattern_t;
typedef int[0,max_paLen]      pattern_len_t;   // 8
typedef int[0,max_zonotopes]  zid_t;
id_list_patterns_t ind_l_patterns     = 0;
id_pattern_t       p_id               = 0;
double             x[3]               = {0.0 , 0.0, 0.0};
int                availableInPattern = 0;
int                visitedPatterns    = 0;
int                ppos               = 0;
int                mode               = 0;
const int modes[8][4]    = {{ 1,0,0,0 },{ 1,1,0,0 },{ 2,0,0,0 },{ 2,1,0,0 },{ 3,0,0,1 },{ 3,1,0,1 },{ 2,0,0,1 },{ 2,1,0,1}};
typedef int dist_t[2][100];

const int nrSteps = 15; //6(work sometimes)
const int step    = 5;    //30, 5
const int horizon = step*nrSteps;
//clock horizon;

import "../../build/lib/libconfig.so" {
  double get_tau();
  /*int get_taumin();
  double get_factorTe();
  double get_factorI();
  double get_factorKe();
  double get_rate_water_input();
  double get_TwaterIn();
  int get_number_of_patterns();
  int get_horizon();*/
};

const double tau=get_tau();
/*
const int    taumin=get_taumin();
const double factorTe=get_factorTe();
const double factorI=get_factorI();
const double factorKe=get_factorKe();
const double rateVo=get_rate_water_input();
const double TwaterIn=get_TwaterIn();
//const int NUM_PATTERNS=get_number_of_patterns();
const int H=get_horizon(); // 210
*/

/*
import "../../build/lib/libconfig.so" { 	
  double get_T();
  double get_V();
  double get_E();
  int get_time();
  int get_valve();
  int get_mode();
  //void get_patterns(int num_patterns, int&amp; arr[NUM_PATTERNS]);
  void get_Te(int horizon, double&amp; arr[H]);
  void get_Ti(int horizon, double&amp; arr[H]);
  void get_I(int horizon, double&amp; arr[H]);
};

// NUM_PATTERNS vs Horizon
const double T_ini=get_T();
const double V_ini=get_V();
const double E_ini=get_E();
const int t_ini=get_time();
const int modeAns=get_mode();
const int mvalve=get_valve();
//const double patterns[NUM_PATTERNS];

double Te[0];
double Ti[0];
double I[0];

//get_patterns(NUM_PATTERNS, patterns);

get_Te(H,Te);
get_Ti(H,Ti);                // problem!!!
get_I(H,I);
*/
                                </declaration>
	<template>
		<name x="5" y="5">Template</name>
		<location id="id0" x="-773" y="-1657">
			<urgent/>
		</location>
		<init ref="id0"/>
	</template>
	<system>// Place template instantiations here.

Process = Template();
// List one or more processes to be composed into a system.
system Process;
                    </system>
	<queries>
		<query>
			<formula>simulate 1 [&lt;=20] { tau, step }</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
