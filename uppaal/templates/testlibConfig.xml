<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
clock GTime;
clock xc;

import "../../build/lib/libconfig.so" {
  int get_tau();
  //double get_tau();
  //int    get_taumin();
  double get_factorTe();
  double get_factorI();
  double get_factorKe();
  double get_rate_water_input();
  double get_TwaterIn();
  int    get_number_steps();
};

const int    tau=get_tau();
//double tau=get_tau();
//const int    taumin=get_taumin();
const double factorTe=get_factorTe();
const double factorI=get_factorI();
const double factorKe=get_factorKe();
const double rateVo=get_rate_water_input();
const double TwaterIn=get_TwaterIn();

// ------------------------------------------------------------------------

const int nrSteps = get_number_steps(); //15  -- 6(work sometimes)
//const int step=taumin;          //30, 5min
const int step=tau;
const int horizon=step*nrSteps;       // 75 steps


//---------------------------- set Dynamic variables ----------------------
import "../../build/lib/libconfig.so" {
  double get_T();
  double get_V();
  double get_E();
  int    get_time();
  int    get_valve();
  int    get_mode();
  void   get_Te(int h, double&amp; arr[horizon]);
  void   get_Ti(int h, double&amp; arr[horizon]);
  void   get_I(int h, double&amp; arr[horizon]);
};

double T_ini, V_ini, E_ini;
double Te[horizon], Ti[horizon], I[horizon];
int    modeAns, mvalve, t_ini;


int int_value;
double double_value;
double dt=60.0;
int _p,_r,_v,_f;

const int modes[8][3]    = {{ 1,0,0 },{ 1,1,0 },{ 2,0,0 },{ 2,1,0 },{ 3,0,1 },{ 3,1,1 },{ 2,0,1 },{ 2,1,1}};
double x[3] = {0.0 , 0.0, 0.0};
double T,V,E,Enext,Vnext,Tnext;
int j;

void post(double &amp;x[3])
{
    E = x[0] + dt*_r*2;
    V = x[1] + dt*rateVo*( 0.1*_p - x[1] );
    T = x[2] + dt*(1/(0.1*_p))*( - factorTe*2.8811059759131854e-06*(x[2]-Te[j]) - _v*9.34673995175876e-05*(x[2]-Ti[j]) - _f*0.001005026*(0.1*_p-x[1])*(x[2]-Ti[j]) + factorI*0.7*0.7*8.403225763080125e-07*I[j] + _r*0.008801843 );// 0.00048018432931886426 - va[h]*9.34673995175876e-05*(x[0]-T_in[h])
    x[0]=E;
    x[1]=V;
    x[2]=T;
}

void set_dynamic(){ 
    double_value = get_T();
    int_value = tau;

    T_ini=get_T();
    V_ini=get_V();
    E_ini=get_E();
    t_ini=get_time();
    modeAns = get_mode();
    mvalve  = get_valve();
    get_Te(horizon,Te);
    get_Ti(horizon,Ti);                // problem!!!
    get_I(horizon,I);


    x[0] = E_ini;
    x[1] = V_ini;
    x[2] = T_ini;

    _p = modes[modeAns][0];
    _r = modes[modeAns][1];
    _f = modes[modeAns][2];  ;
    _v = 0;//mvalve;             // v = random(0.1);va[h];

    for( j = 0; j &lt; 5; j=j+1)
    {       
        post(x);
    }

    Enext = x[0];
    Vnext = x[1];
    Tnext = x[2];// 80.0

}
</declaration>
	<template>
		<name x="5" y="5">Template</name>
		<declaration>    // Place local declarations here.</declaration>
		<location id="id0" x="-4760" y="-1980">
			<label kind="exponentialrate" x="-4770" y="-1946">1</label>
		</location>
		<location id="id1" x="-4573" y="-1980">
			<label kind="exponentialrate" x="-4583" y="-1946">1</label>
		</location>
		<location id="id2" x="-4403" y="-1980">
			<label kind="exponentialrate" x="-4413" y="-1946">1</label>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-4539" y="-2014">xc&gt;horizon</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-4709" y="-1971">set_dynamic(),
xc=0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Process = Template();
// List one or more processes to be composed into a system.
system Process;
    </system>
	<queries>
		<query>
			<formula>simulate 1 [&lt;=horizon] {Tnext}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=horizon] {double_value}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=horizon] {int_value}</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
