<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>clock GTime;
//------------------------------- set Static values ------------------------------------------------------------

import "../../build/lib/libconfig.so" {
  int get_tau();
  double get_factorTe();
  double get_factorI();
  double get_factorKe();
  double get_rate_water_input(); // OK
  double get_TwaterIn();
  int    get_number_steps();
  double get_Tg();
  double get_alpha();
};

const int tau=get_tau();
const double factorTe=get_factorTe();
const double factorI=get_factorI();
const double factorKe=get_factorKe();
const double rateVo=get_rate_water_input();
const double TwaterIn=get_TwaterIn();
const double Tg=get_Tg();
const double alpha=get_alpha();

// ------------------------------------------------------------------------

const int nrSteps = get_number_steps(); //15  -- 6(work sometimes)
const int step    = tau; // 5 min
const int horizon = step*nrSteps; // 75 steps
const int horizon_tau = horizon + tau;


//---------------------------- set Dynamic variables ----------------------
import "../../build/lib/libconfig.so" {
  double get_T();
  double get_V();
  double get_E();
  int    get_time();
  int    get_valve();
  int    get_mode();
  void   get_Te(int h, double&amp; arr[horizon_tau]);
  void   get_Ti(int h, double&amp; arr[horizon_tau]);
  void   get_I(int h, double&amp; arr[horizon_tau]);
};

double T_ini, V_ini, E_ini;
double Te[horizon_tau], Ti[horizon_tau], I[horizon_tau];
int    mode_ini, valve_ini, t_ini;

void set_dynamic(){ 
    T_ini=get_T();
    V_ini=get_V();
    E_ini=get_E();
    t_ini=get_time();
    mode_ini= get_mode();
    valve_ini= get_valve();
    get_Te(horizon_tau,Te);
    get_Ti(horizon_tau,Ti);                // problem!!!
    get_I(horizon_tau,I);
}


// ------------------- Place global declarations here ----------------------
const int max_mode     = 8-1;
typedef int[0,max_mode] mode_t;
int p_id;
double             x[3];//               = {0.0 , 0.0, 0.0};
int                ppos               = 0;
//int                mode               = 0;

// HERE ! mode initial
const int modes[8][3]    = {{ 1,0,0 },{ 1,1,0 },{ 2,0,0 },{ 2,1,0 },{ 3,0,1 },{ 3,1,1 },{ 2,0,1 },{ 2,1,1}};
typedef int dist_t[2][100];

clock xc, yc, rc;
double pareto = 0.0;
double Tnext=0.0, Vnext=0.0, Enext=0.0;
int    it = 0, flag = 0;

double paretoFunc()
{
	return pareto+( alpha*x[0] + (1.0-alpha)*fabs(Tg-x[2]) );
}

double dt_sec=60.0;
double E, V, T;
int mode, valve;
int j, index;

double Tgg;

void post(int it)
{
    int p,r,v,f;
    p = modes[mode][0];
    r = modes[mode][1];
    f = modes[mode][2];
    v = valve;
    index = it*tau;
    for(j=index; j &lt; index+tau; j=j+1)
    {
        E = x[0] + dt_sec*r*2;
        V = x[1] + dt_sec*rateVo*( 0.1*p - x[1] );
        T = x[2] + dt_sec*(1/(0.1*p))*(
                        - factorTe*2.8811059759131854e-06*(x[2]-Te[j])
                        - v*9.34673995175876e-05*(x[2]-Ti[j])
                        - f*factorKe*0.001005026*(0.1*p-x[1])*(x[2]-Ti[j])
                        + factorI*0.7*0.7*8.403225763080125e-07*I[j]
                        + r*0.008801843 );
        x[0]=E;
        x[1]=V;
        x[2]=T;
    }
    //Tgg = Tg;
    return;
}

void predict()
{
    set_dynamic();
    x[0] = E_ini;
    x[1] = V_ini;
    x[2] = T_ini;
    valve = valve_ini;
    mode = mode_ini;
    Tgg = Tg;
    post(0);;
    Tnext = T;
    return;
}
</declaration>
	<template>
		<name x="5" y="5">Template</name>
		<location id="id0" x="-153" y="-1343">
			<urgent/>
		</location>
		<location id="id1" x="-154" y="-1233">
			<urgent/>
		</location>
		<location id="id2" x="-153" y="-918">
			<label kind="invariant" x="-136" y="-926">xc &lt;= step</label>
		</location>
		<location id="id3" x="-153" y="-782">
			<urgent/>
		</location>
		<location id="id4" x="-153" y="-680">
			<name x="-170" y="-655">DONE</name>
			<urgent/>
		</location>
		<location id="id5" x="-204" y="-977">
			<urgent/>
		</location>
		<location id="id6" x="-102" y="-977">
			<urgent/>
		</location>
		<branchpoint id="id7" x="-153" y="-1020">
		</branchpoint>
		<init ref="id0"/>
		<transition>
			<source ref="id1"/>
			<target ref="id7"/>
			<label kind="select" x="-145" y="-1165">m : mode_t</label>
			<label kind="assignment" x="-145" y="-1148">mode=m,
ppos=ppos+1</label>
		</transition>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="assignment" x="-111" y="-960">valve=1</label>
		</transition>
		<transition controllable="false">
			<source ref="id5"/>
			<target ref="id2"/>
			<label kind="assignment" x="-264" y="-952">valve=0</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="probability" x="-128" y="-1028">1</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="probability" x="-204" y="-1020">50</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-144" y="-739">yc &gt;  horizon</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-392" y="-1088">yc &lt;= horizon</label>
			<label kind="assignment" x="-358" y="-1071">it=it+1</label>
			<nail x="-281" y="-782"/>
			<nail x="-281" y="-1233"/>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-136" y="-909">xc == step</label>
			<label kind="assignment" x="-136" y="-884">post(it),
xc = 0,
rc = 0,
pareto = paretoFunc()</label>
		</transition>
		<transition controllable="false">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-136" y="-1317">predict(),
it=1,
xc=0,
rc=0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Process = Template();
// List one or more processes to be composed into a system.
system Process;
                    </system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=horizon] { visitedPatterns,mvalve,ppos } under Opt</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=horizon] { fer } under Opt</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=horizon] { ppos,visitedPatterns } under Opt</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=100] { ppos }</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy Opt = minE (pareto) [&lt;=horizon]: &lt;&gt; GTime&gt;=horizon</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=horizon] {x[2],mode,Tgg  }</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=horizon] { mvalve, modeAns }</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=horizon] { ppos,visitedPatterns,mode,flag,Tnext,zi,mvalve } under Opt</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
